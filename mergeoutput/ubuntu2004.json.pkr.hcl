# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "access_key" {
  type      = string
  default   = "${env("AWS_ACCESS_KEY_ID")}"
  sensitive = true
}

variable "aws_account" {
  type    = string
  default = "${env("PACKER_AWS_ACCOUNT")}"
}

variable "commit_file" {
  type    = string
  default = "/imagegeneration/commit.txt"
}

variable "github_feed_token" {
  type      = string
  default   = "${env("MEROXA_MACHINE")}"
  sensitive = true
}

variable "go_default" {
  type    = string
  default = "1.17"
}

variable "go_versions" {
  type    = string
  default = "1.16 1.17"
}

variable "helper_script_folder" {
  type    = string
  default = "/imagegeneration/helpers"
}

variable "image_folder" {
  type    = string
  default = "/imagegeneration"
}

variable "image_os" {
  type    = string
  default = "ubuntu20"
}

variable "image_version" {
  type    = string
  default = "dev"
}

variable "imagedata_file" {
  type    = string
  default = "/imagegeneration/imagedata.json"
}

variable "installer_script_folder" {
  type    = string
  default = "/imagegeneration/installers"
}

variable "metadata_file" {
  type    = string
  default = "/imagegeneration/metadatafile"
}

variable "runner_home" {
  type    = string
  default = "/home/runner"
}

variable "runner_user" {
  type    = string
  default = "runner"
}

variable "secret_key" {
  type      = string
  default   = "${env("AWS_SECRET_ACCESS_KEY")}"
  sensitive = true
}

variable "subnet_id" {
  type    = string
  default = "${env("PACKER_SUBNET_ID")}"
}

variable "vcs_ref" {
  type    = string
  default = ""
}

# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/docs/datasources/amazon/ami
data "amazon-ami" "github-runner-base-focal" {
  access_key = "${var.access_key}"
  filters = {
    name                = "github-runner-base-focal"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["${var.aws_account}"]
  region      = "us-east-1"
  secret_key  = "${var.secret_key}"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.
# The "legacy_strftime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "focal" {
  access_key            = "${var.access_key}"
  ami_name              = "github-runner-focal-${legacy_strftime("%m-%d-%Y_%H-%M")}"
  ami_regions           = ["us-east-1"]
  force_delete_snapshot = true
  force_deregister      = true
  instance_type         = "m5.xlarge"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = 100
    volume_type           = "gp2"
  }
  region           = "us-east-1"
  secret_key       = "${var.secret_key}"
  source_ami       = "${data.amazon-ami.github-runner-base-focal.id}"
  ssh_agent_auth   = true
  ssh_keypair_name = "meroxa-aws-ci"
  ssh_username     = "runner"
  subnet_id        = "${var.subnet_id}"
  tags = {
    Name    = "github-runner-focal-${legacy_isotime("20060102150405")}"
    env     = "dev"
    os      = "ubuntu"
    service = "ci"
    source  = "github-runner"
  }
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.focal"]

  provisioner "shell" {
    environment_vars = ["DEBIAN_FRONTEND=noninteractive"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline           = ["echo 127.0.0.1 $(hostname) >> /etc/hosts", "apt-get update", "apt-get -y install --no-install-recommends sudo apt-utils software-properties-common lsb-release rsync", "apt-get -y install --no-install-recommends wget curl libunwind8 apt-transport-https ca-certificates", "apt-get -y install --no-install-recommends git ruby ohai locales", "locale-gen en_US.UTF-8", "export LANG=en_US.UTF-8 | tee -a /etc/environment"]
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline          = ["mkdir ${var.image_folder}", "chmod 777 ${var.image_folder}"]
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    script          = "${path.root}/scripts/base/apt-mock.sh"
  }

  provisioner "shell" {
    environment_vars = ["DEBIAN_FRONTEND=noninteractive"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/base/repos.sh"]
  }

  provisioner "shell" {
    environment_vars = ["DEBIAN_FRONTEND=noninteractive"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    script           = "${path.root}/scripts/base/apt.sh"
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    script          = "${path.root}/scripts/base/limits.sh"
  }

  provisioner "file" {
    destination = "${var.helper_script_folder}"
    source      = "${path.root}/scripts/helpers"
  }

  provisioner "file" {
    destination = "${var.installer_script_folder}"
    source      = "${path.root}/scripts/installers"
  }

  provisioner "file" {
    destination = "${var.image_folder}"
    source      = "${path.root}/post-generation"
  }

  provisioner "file" {
    destination = "${var.image_folder}"
    source      = "${path.root}/scripts/tests"
  }

  provisioner "file" {
    destination = "${var.image_folder}"
    source      = "${path.root}/scripts/SoftwareReport"
  }

  provisioner "file" {
    destination = "${var.installer_script_folder}/toolset.json"
    source      = "${path.root}/toolsets/toolset-2004.json"
  }

  provisioner "shell" {
    environment_vars = ["IMAGE_VERSION=${var.image_version}", "IMAGEDATA_FILE=${var.imagedata_file}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/preimagedata.sh"]
  }

  provisioner "shell" {
    environment_vars = ["IMAGE_VERSION=${var.image_version}", "IMAGE_OS=${var.image_os}", "HELPER_SCRIPTS=${var.helper_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/configure-environment.sh"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/complete-snap-setup.sh"]
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts         = ["${path.root}/scripts/installers/powershellcore.sh"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} pwsh -f {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/Install-PowerShellModules.ps1", "${path.root}/scripts/installers/Install-AzureModules.ps1"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "DOCKERHUB_LOGIN=${var.dockerhub_login}", "DOCKERHUB_PASSWORD=${var.dockerhub_password}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/docker-compose.sh", "${path.root}/scripts/installers/docker-moby.sh"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "DEBIAN_FRONTEND=noninteractive"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/azcopy.sh", "${path.root}/scripts/installers/azure-cli.sh", "${path.root}/scripts/installers/azure-devops-cli.sh", "${path.root}/scripts/installers/basic.sh", "${path.root}/scripts/installers/bicep.sh", "${path.root}/scripts/installers/aliyun-cli.sh", "${path.root}/scripts/installers/apache.sh", "${path.root}/scripts/installers/aws.sh", "${path.root}/scripts/installers/clang.sh", "${path.root}/scripts/installers/swift.sh", "${path.root}/scripts/installers/cmake.sh", "${path.root}/scripts/installers/codeql-bundle.sh", "${path.root}/scripts/installers/containers.sh", "${path.root}/scripts/installers/dotnetcore-sdk.sh", "${path.root}/scripts/installers/erlang.sh", "${path.root}/scripts/installers/firefox.sh", "${path.root}/scripts/installers/gcc.sh", "${path.root}/scripts/installers/gfortran.sh", "${path.root}/scripts/installers/git.sh", "${path.root}/scripts/installers/github-cli.sh", "${path.root}/scripts/installers/google-chrome.sh", "${path.root}/scripts/installers/google-cloud-sdk.sh", "${path.root}/scripts/installers/haskell.sh", "${path.root}/scripts/installers/heroku.sh", "${path.root}/scripts/installers/hhvm.sh", "${path.root}/scripts/installers/java-tools.sh", "${path.root}/scripts/installers/kubernetes-tools.sh", "${path.root}/scripts/installers/oc.sh", "${path.root}/scripts/installers/leiningen.sh", "${path.root}/scripts/installers/miniconda.sh", "${path.root}/scripts/installers/mono.sh", "${path.root}/scripts/installers/kotlin.sh", "${path.root}/scripts/installers/mysql.sh", "${path.root}/scripts/installers/mssql-cmd-tools.sh", "${path.root}/scripts/installers/sqlpackage.sh", "${path.root}/scripts/installers/nginx.sh", "${path.root}/scripts/installers/nvm.sh", "${path.root}/scripts/installers/nodejs.sh", "${path.root}/scripts/installers/bazel.sh", "${path.root}/scripts/installers/oras-cli.sh", "${path.root}/scripts/installers/phantomjs.sh", "${path.root}/scripts/installers/php.sh", "${path.root}/scripts/installers/postgresql.sh", "${path.root}/scripts/installers/pulumi.sh", "${path.root}/scripts/installers/ruby.sh", "${path.root}/scripts/installers/r.sh", "${path.root}/scripts/installers/rust.sh", "${path.root}/scripts/installers/julia.sh", "${path.root}/scripts/installers/sbt.sh", "${path.root}/scripts/installers/selenium.sh", "${path.root}/scripts/installers/terraform.sh", "${path.root}/scripts/installers/packer.sh", "${path.root}/scripts/installers/vcpkg.sh", "${path.root}/scripts/installers/dpkg-config.sh", "${path.root}/scripts/installers/mongodb.sh", "${path.root}/scripts/installers/android.sh", "${path.root}/scripts/installers/yq.sh", "${path.root}/scripts/installers/pypy.sh", "${path.root}/scripts/installers/python.sh", "${path.root}/scripts/installers/graalvm.sh"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} pwsh -f {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/Install-Toolset.ps1", "${path.root}/scripts/installers/Configure-Toolset.ps1"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/pipx-packages.sh"]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    execute_command  = "/bin/bash -c 'source /etc/environment && {{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/homebrew.sh"]
  }

  provisioner "file" {
    destination = "/tmp/hosts"
    source      = "${path.root}/etc/hosts"
  }

  provisioner "shell" {
    environment_vars = ["RUNNER_HOME=${var.runner_home}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline           = ["mv -f /tmp/hosts /etc/", "chown root:root /etc/hosts"]
  }

  provisioner "shell" {
    environment_vars = ["RUNNER_HOME=${var.runner_home}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/grub.sh"]
  }

  provisioner "shell" {
    environment_vars = ["RUNNER_HOME=${var.runner_home}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline           = ["rm -fv \"$RUNNER_HOME/*.tar.gz\"", "rm -fv \"$RUNNER_HOME/*.tar.bz2\"", "rm -fv \"$RUNNER_HOME/*.deb\"", "rm -fv \"$RUNNER_HOME/null\"", "rm -fv \"$RUNNER_HOME/Release.key\"", "rm -fv \"$RUNNER_HOME/install.sh\"", "rm -frv \"$RUNNER_HOME/azcopy\""]
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "RUNNER_HOME=${var.runner_home}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} pwsh -f {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/Install-Awspowershell.ps1"]
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline          = ["chown -R ${var.runner_user}:${var.runner_user} ${var.runner_home}", "usermod -aG docker ${var.runner_user}"]
  }

  provisioner "shell" {
    execute_command     = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    pause_before        = "1m0s"
    scripts             = ["${path.root}/scripts/installers/cleanup.sh"]
    start_retry_timeout = "10m"
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    script          = "${path.root}/scripts/base/apt-mock-remove.sh"
  }

  provisioner "shell" {
    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
    inline           = "sleep 1"
  }

  provisioner "shell" {
    environment_vars = ["HELPER_SCRIPT_FOLDER=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "IMAGE_FOLDER=${var.image_folder}"]
    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    scripts          = ["${path.root}/scripts/installers/post-deployment.sh"]
  }

  provisioner "shell" {
    environment_vars = ["RUN_VALIDATION=${var.run_validation_diskspace}"]
    scripts          = ["${path.root}/scripts/installers/validate-disk-space.sh"]
  }

  provisioner "file" {
    destination = "/tmp/"
    source      = "${path.root}/config/ubuntu2004.conf"
  }

  provisioner "shell" {
    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
    inline          = ["mkdir -p /etc/vsts", "cp /tmp/ubuntu2004.conf /etc/vsts/machine_instance.conf"]
  }

}
